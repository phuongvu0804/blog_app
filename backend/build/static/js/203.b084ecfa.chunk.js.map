{"version":3,"file":"static/js/203.b084ecfa.chunk.js","mappings":"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","sources":["pages/authPages/SignUp/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport authService from '@/services/auth';\n\nimport { LoadingButton } from '@mui/lab';\nimport { Alert, Button, FormControl, Input, InputLabel } from '@mui/material';\n\nimport '../authPages.scss';\nimport { actLogin } from '@/reducers/userReducer';\n\nconst SignUp = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [formInputs, setFormInputs] = useState({\n        username: '',\n        name: '',\n        password: '',\n    });\n    const [noti, setNoti] = useState({\n        type: 'info',\n        content: null,\n    });\n\n    const handleChange = (e) => {\n        setFormInputs({ ...formInputs, [e.target.name]: e.target.value });\n    };\n\n    const handleValidate = () => {\n        let isValid = false;\n\n        if (formInputs.username.length < 3) {\n            return setNoti({\n                type: 'error',\n                content: 'Username must be at least 3 characters',\n            });\n        }\n\n        if (formInputs.name.length < 3) {\n            return setNoti({\n                type: 'error',\n                content: 'Name must be at least 3 characters',\n            });\n        }\n\n        if (formInputs.password.length < 6) {\n            return setNoti({\n                type: 'error',\n                content: 'Password must be at least 6 characters',\n            });\n        }\n\n        return (isValid = true);\n    };\n\n    const handleUploadAvatar = (file) => {\n        let formData = new FormData();\n\n        console.log(file);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const isValid = handleValidate();\n\n        if (isValid) {\n            console.log(formInputs);\n\n            try {\n                await authService.signUp(formInputs);\n\n                setNoti({\n                    type: 'success',\n                    content: 'You have signed up successfully',\n                });\n\n                setTimeout(() => {\n                    dispatch(\n                        actLogin(\n                            {\n                                username: formInputs.username,\n                                password: formInputs.password,\n                            },\n                            navigate,\n                        ),\n                    );\n                }, 1000);\n            } catch (err) {\n                setNoti({\n                    type: 'error',\n                    content: err.response.data.error,\n                });\n            }\n        }\n    };\n\n    return (\n        <form className=\"auth__form\" onSubmit={handleSubmit}>\n            {noti.content && (\n                <Alert\n                    severity={noti.type}\n                    className=\"noti\"\n                    sx={{ fontSize: '1.6rem', marginBottom: '3rem' }}\n                >\n                    {noti.content}\n                </Alert>\n            )}\n            <FormControl className=\"auth__input-group\">\n                <InputLabel>Username</InputLabel>\n                <Input\n                    name=\"username\"\n                    value={formInputs.username}\n                    onChange={handleChange}\n                />\n            </FormControl>\n            <FormControl className=\"auth__input-group\">\n                <InputLabel>Full name</InputLabel>\n                <Input\n                    name=\"name\"\n                    value={formInputs.name}\n                    onChange={handleChange}\n                />\n            </FormControl>\n            {/* <FormControl className=\"auth__input-group\">\n                <InputLabel>Email</InputLabel>\n                <Input\n                    name=\"email\"\n                    value={formInputs.email}\n                    onChange={handleChange}\n                />\n            </FormControl> */}\n            <FormControl className=\"auth__input-group\">\n                <InputLabel>Password</InputLabel>\n                <Input\n                    name=\"password\"\n                    type=\"password\"\n                    value={formInputs.password}\n                    onChange={handleChange}\n                />\n            </FormControl>\n            {/* <FormControl className=\"auth__input-group\">\n                <InputLabel>Bio</InputLabel>\n                <Input\n                    name=\"description\"\n                    value={formInputs.description}\n                    onChange={handleChange}\n                />\n            </FormControl> */}\n            {/* <FormControl className=\"auth__input-group\">\n                <Button\n                    variant=\"text\"\n                    component=\"label\"\n                    sx={{\n                        color: 'var(--black)',\n                        textDecoration: 'underline',\n                        textTransform: 'none',\n                    }}\n                >\n                    Upload avatar\n                    <input\n                        hidden\n                        accept=\"image/*\"\n                        type=\"file\"\n                        onChange={(e) => handleUploadAvatar(e.target.files[0])}\n                    />\n                </Button>\n            </FormControl> */}\n\n            <LoadingButton\n                type=\"submit\"\n                className=\"auth__input-btn\"\n                variant=\"contained\"\n            >\n                Submit\n            </LoadingButton>\n        </form>\n    );\n};\n\nexport default SignUp;\n"],"names":["_ref","dispatch","useDispatch","navigate","useNavigate","_useState","useState","username","name","password","_useState2","_slicedToArray","formInputs","setFormInputs","_useState3","type","content","_useState4","noti","setNoti","handleChange","e","_objectSpread","_defineProperty","target","value","_jsxs","className","onSubmit","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","length","console","log","authService","signUp","setTimeout","actLogin","t0","response","data","error","stop","apply","arguments","children","_jsx","Alert","severity","sx","fontSize","marginBottom","FormControl","InputLabel","Input","onChange","LoadingButton","variant"],"sourceRoot":""}